print("Training time:")
print(training_time[3])
print("Training memory:")
print(training_mem)
print("Extracting time:")
print(extract_time[3])
print("Extracting memory:")
print(extract_mem)
print("Average similarity:")
print(mean(similarity))
# write(sprintf("Training time: %s\n
#               Training memory: %s\n
#               Extracting time: %s\n
#               Extracting memory: %s\n
#               Average similarity: %s\n",
#               training_time[3],
#               training_mem,
#               extract_time[3],
#               extract_mem,
#               mean(similarity)),
#       file = paste(model_name, ".res", sep = ""))
unlink(dirname(model), recursive=TRUE)
return (list(extracted_kw = extracted_kw, true_kw = true_keywords, similarity = similarity))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
perform_test = function(model_name, train_folder, data_folder, true_keywords_folder){
# train_keywords = get_keywords(paste(train_folder, "kw", sep = '/'))
train_keywords = get_keywords(train_folder)
training_mem = mem_change({
training_time = system.time({
model = train_model(model_name = model_name, data_folder = train_folder, keywords = train_keywords)
})
})
extract_mem = mem_change({
extract_time = system.time({
extracted_kw = extract_keywords(model, data_folder)
})
})
print(training_time)
print(extract_time)
write_keywords(data_folder, extracted_kw)
true_keywords = get_keywords(path = true_keywords_folder)
similarity = keywords_similarity(extracted_kw, true_keywords)
print(similarity)
print("Training time:")
print(training_time[3])
print("Training memory:")
print(training_mem)
print("Extracting time:")
print(extract_time[3])
print("Extracting memory:")
print(extract_mem)
print("Average similarity:")
print(mean(similarity))
# write(sprintf("Training time: %s\n
#               Training memory: %s\n
#               Extracting time: %s\n
#               Extracting memory: %s\n
#               Average similarity: %s\n",
#               training_time[3],
#               training_mem,
#               extract_time[3],
#               extract_mem,
#               mean(similarity)),
#       file = paste(model_name, ".res", sep = ""))
unlink(dirname(model), recursive=TRUE)
return (list(extracted_kw = extracted_kw, true_kw = true_keywords, similarity = similarity))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, paste(data_folder, "true_kw", sep=''))
perform_test = function(model_name, train_folder, data_folder, true_keywords_folder){
# train_keywords = get_keywords(paste(train_folder, "kw", sep = '/'))
train_keywords = get_keywords(train_folder)
training_mem = mem_change({
training_time = system.time({
model = train_model(model_name = model_name, data_folder = train_folder, keywords = train_keywords)
})
})
extract_mem = mem_change({
extract_time = system.time({
extracted_kw = extract_keywords(model, data_folder)
})
})
print(extracted_kw)
write_keywords(data_folder, extracted_kw)
true_keywords = get_keywords(path = true_keywords_folder)
print(true_keywords)
similarity = keywords_similarity(extracted_kw, true_keywords)
print(similarity)
print("Training time:")
print(training_time[3])
print("Training memory:")
print(training_mem)
print("Extracting time:")
print(extract_time[3])
print("Extracting memory:")
print(extract_mem)
print("Average similarity:")
print(mean(similarity))
# write(sprintf("Training time: %s\n
#               Training memory: %s\n
#               Extracting time: %s\n
#               Extracting memory: %s\n
#               Average similarity: %s\n",
#               training_time[3],
#               training_mem,
#               extract_time[3],
#               extract_mem,
#               mean(similarity)),
#       file = paste(model_name, ".res", sep = ""))
unlink(dirname(model), recursive=TRUE)
return (list(extracted_kw = extracted_kw, true_kw = true_keywords, similarity = similarity))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
repeats = 5
keywords_cnt = 10
n = 100
N = 100
test_N = 10
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
# генерируем "реальные" данные
for (i in 1:N){
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(keywords, collapse = "\n"), file = sprintf("%s/true_kw/%s_kw.key", gen_path, i))
write(paste(sample_vec, collapse = " "), file = sprintf("%s/%s.txt", gen_path, i))
}
train_folder = "generated/repeats_sample/training"
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
# Reuters TG
model_name = "reuters_tg"
train_folder = "reuters_tg/full/test_ds/training"
data_folder = "reuters_tg/ukraine/tmp"
res = perform_test(model_name, train_folder, data_folder, data_folder)
train_folder = "generated/repeats_sample/training"
res = perform_test(model_name, train_folder, data_folder, data_folder)
perform_test = function(model_name, train_folder, data_folder, true_keywords_folder){
train_keywords = get_keywords(paste(train_folder, "kw", sep = '/'))
# train_keywords = get_keywords(train_folder)
print(train_keywords)
training_mem = mem_change({
training_time = system.time({
model = train_model(model_name = model_name, data_folder = train_folder, keywords = train_keywords)
})
})
extract_mem = mem_change({
extract_time = system.time({
extracted_kw = extract_keywords(model, data_folder)
})
})
print(extracted_kw)
write_keywords(data_folder, extracted_kw)
true_keywords = get_keywords(path = true_keywords_folder)
print(true_keywords)
similarity = keywords_similarity(extracted_kw, true_keywords)
print(similarity)
print("Training time:")
print(training_time[3])
print("Training memory:")
print(training_mem)
print("Extracting time:")
print(extract_time[3])
print("Extracting memory:")
print(extract_mem)
print("Average similarity:")
print(mean(similarity))
# write(sprintf("Training time: %s\n
#               Training memory: %s\n
#               Extracting time: %s\n
#               Extracting memory: %s\n
#               Average similarity: %s\n",
#               training_time[3],
#               training_mem,
#               extract_time[3],
#               extract_mem,
#               mean(similarity)),
#       file = paste(model_name, ".res", sep = ""))
unlink(dirname(model), recursive=TRUE)
return (list(extracted_kw = extracted_kw, true_kw = true_keywords, similarity = similarity))
}
perform_test = function(model_name, train_folder, data_folder, true_keywords_folder){
train_keywords = get_keywords(paste(train_folder, "kw", sep = '/'))
# train_keywords = get_keywords(train_folder)
# print(train_keywords)
training_mem = mem_change({
training_time = system.time({
model = train_model(model_name = model_name, data_folder = train_folder, keywords = train_keywords)
})
})
extract_mem = mem_change({
extract_time = system.time({
extracted_kw = extract_keywords(model, data_folder)
})
})
print(extracted_kw)
write_keywords(data_folder, extracted_kw)
true_keywords = get_keywords(path = true_keywords_folder)
print(true_keywords)
similarity = keywords_similarity(extracted_kw, true_keywords)
print(similarity)
print("Training time:")
print(training_time[3])
print("Training memory:")
print(training_mem)
print("Extracting time:")
print(extract_time[3])
print("Extracting memory:")
print(extract_mem)
print("Average similarity:")
print(mean(similarity))
# write(sprintf("Training time: %s\n
#               Training memory: %s\n
#               Extracting time: %s\n
#               Extracting memory: %s\n
#               Average similarity: %s\n",
#               training_time[3],
#               training_mem,
#               extract_time[3],
#               extract_mem,
#               mean(similarity)),
#       file = paste(model_name, ".res", sep = ""))
unlink(dirname(model), recursive=TRUE)
return (list(extracted_kw = extracted_kw, true_kw = true_keywords, similarity = similarity))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
repeats = 5
keywords_cnt = 10
n = 100
N = 100
test_N = 50
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
# генерируем "реальные" данные
for (i in 1:N){
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(keywords, collapse = "\n"), file = sprintf("%s/true_kw/%s_kw.key", gen_path, i))
write(paste(sample_vec, collapse = " "), file = sprintf("%s/%s.txt", gen_path, i))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
gen_path = "generated/repeats_sample"
repeats = 5
keywords_cnt = 10
n = 100
N = 100
test_N = 5
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
# генерируем "реальные" данные
for (i in 1:N){
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(keywords, collapse = "\n"), file = sprintf("%s/true_kw/%s_kw.key", gen_path, i))
write(paste(sample_vec, collapse = " "), file = sprintf("%s/%s.txt", gen_path, i))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
gen_path = "generated/repeats_sample"
repeats = 5
keywords_cnt = 10
n = 100
N = 100
test_N = 100
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
gen_path = "generated/repeats_sample"
repeats = 5
keywords_cnt = 10
n = 100
N = 100
test_N = 50
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
test_N = 100
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
test_N = 50
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
train_folder = "generated/repeats_sample/training"
res = perform_test(model_name, train_folder, data_folder, data_folder)
keywords_cnt = 10
n = 100
N = 100
test_N = 10
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "true_kw", sep="/"), pattern = "*.key", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training", sep="/"), pattern = "*txt", full.names = TRUE))
file.remove(list.files(paste(gen_path, "training/kw", sep="/"), pattern = "*.key", full.names = TRUE))
# генерируем тренировочные данные
for (i in 1:test_N){
file.remove(list.files(gen_path, pattern = "*.txt", full.names = TRUE))
sample_vec = sample(x = dictionary, size = n)
keywords = sample(sample_vec, size = keywords_cnt)
for (word in keywords)
for (j in 1:sample(1:repeats, size = 1)){
sample_vec[sample(1:length(sample_vec), size = 1)] = word
}
write(paste(sample_vec, collapse = " "), file = sprintf("%s/training/%s.txt", gen_path, i))
write(paste(keywords, collapse = "\n"), file = sprintf("%s/training/kw/%s_kw.key", gen_path, i))
}
res = perform_test(model_name, train_folder, data_folder, data_folder)
perform_test = function(model_name, train_folder, data_folder, true_keywords_folder){
# train_keywords = get_keywords(paste(train_folder, "kw", sep = '/'))
train_keywords = get_keywords(train_folder)
# print(train_keywords)
training_mem = mem_change({
training_time = system.time({
model = train_model(model_name = model_name, data_folder = train_folder, keywords = train_keywords)
})
})
extract_mem = mem_change({
extract_time = system.time({
extracted_kw = extract_keywords(model, data_folder)
})
})
print(extracted_kw)
write_keywords(data_folder, extracted_kw)
true_keywords = get_keywords(path = true_keywords_folder)
print(true_keywords)
similarity = keywords_similarity(extracted_kw, true_keywords)
print(similarity)
print("Training time:")
print(training_time[3])
print("Training memory:")
print(training_mem)
print("Extracting time:")
print(extract_time[3])
print("Extracting memory:")
print(extract_mem)
print("Average similarity:")
print(mean(similarity))
# write(sprintf("Training time: %s\n
#               Training memory: %s\n
#               Extracting time: %s\n
#               Extracting memory: %s\n
#               Average similarity: %s\n",
#               training_time[3],
#               training_mem,
#               extract_time[3],
#               extract_mem,
#               mean(similarity)),
#       file = paste(model_name, ".res", sep = ""))
unlink(dirname(model), recursive=TRUE)
return (list(extracted_kw = extracted_kw, true_kw = true_keywords, similarity = similarity))
}
# Reuters TG
model_name = "reuters_tg"
train_folder = "reuters_tg/full/test_ds/training"
data_folder = "reuters_tg/ukraine/tmp"
res = perform_test(model_name, train_folder, data_folder, data_folder)
source("~/Ucheba/FPMI/AMI_1st_sem/PSSA/rkea.R")
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
# Reuters TG
model_name = "reuters_tg"
train_folder = "reuters_tg/full/test_ds/training"
data_folder = "reuters_tg/ukraine/tmp"
res = perform_test(model_name, train_folder, data_folder, data_folder)
source("~/Ucheba/FPMI/AMI_1st_sem/PSSA/rkea.R")
source("~/Ucheba/FPMI/AMI_1st_sem/PSSA/rkea.R")
# Reuters TG
model_name = "reuters_tg"
train_folder = "reuters_tg/full/test_ds/training"
data_folder = "reuters_tg/ukraine/tmp"
res = perform_test(model_name, train_folder, data_folder, data_folder)
# Reuters TG
model_name = "reuters_tg"
train_folder = "reuters_tg/full/test_ds/training"
data_folder = "reuters_tg/ukraine/tmp"
res = perform_test(model_name, train_folder, data_folder, data_folder)
# сгенерированные модельные примеры
model_name = "generated"
train_folder = "generated/repeats_sample/training"
data_folder = "generated/repeats_sample/"
res = perform_test(model_name, train_folder, data_folder, paste(data_folder, "true_kw", sep=''))
# Reuters TG
model_name = "reuters_tg"
train_folder = "reuters_tg/full/test_ds/training"
data_folder = "reuters_tg/ukraine/tmp"
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
res = perform_test(model_name, train_folder, data_folder, data_folder)
# Reuters TG
model_name = "reuters_tg"
train_folder = "reuters_tg/full/test_ds/training"
data_folder = "reuters_tg/ukraine/tmp"
res = perform_test(model_name, train_folder, data_folder, data_folder)
source("~/Ucheba/FPMI/AMI_1st_sem/PSSA/rkea.R")
source("~/Ucheba/FPMI/AMI_1st_sem/PSSA/rkea.R")
source("~/Ucheba/FPMI/AMI_1st_sem/PSSA/rkea.R")
source("~/Ucheba/FPMI/AMI_1st_sem/PSSA/rkea.R")
